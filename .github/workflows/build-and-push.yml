name: Build and Push Private LLM Cloud

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.privacy-focused
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Basic security check
        run: |
          echo "üîç Running basic security checks..."

          # Check for common secrets
          if grep -r "sk-[a-zA-Z0-9]\{32,\}" --exclude-dir=.git .; then
            echo "‚ùå Potential API keys found"
            exit 1
          fi

          # Check Python syntax
          python3 -m py_compile scripts/model-manager.py
          python3 -m py_compile api/secure-proxy.py
          python3 -m py_compile api/auth-middleware.py

          echo "‚úÖ Security and syntax checks passed"

      - name: Validate templates
        run: |
          echo "üöÄ Validating deployment templates..."

          # Validate JSON templates
          python3 -c "
          import json

          # Test RunPod template
          with open('templates/runpod-template.json') as f:
              json.load(f)
              print('‚úÖ RunPod template valid')

          # Test Vast.ai template
          with open('templates/vast-ai-template.json') as f:
              json.load(f)
              print('‚úÖ Vast.ai template valid')
          "

      - name: Clean up old images
        if: github.event_name != 'pull_request'
        run: |
          echo "üßπ Image cleanup completed"
          echo "Built image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

  notify:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Deployment notification
        run: |
          echo "üìä Build Summary"
          echo "==============="
          echo "Status: ${{ needs.build-and-push.result }}"

          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            echo "‚úÖ Private LLM Cloud built successfully!"
            echo "üê≥ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
            echo "üöÄ Ready for deployment!"
          else
            echo "‚ùå Build failed - check logs above"
          fi