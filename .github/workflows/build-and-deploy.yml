name: Build and Deploy Private LLM Cloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-check:
    name: Security and Privacy Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for secrets
        run: |
          echo "üîç Checking for potential secrets..."

          # Check for common API key patterns
          if grep -r "sk-[a-zA-Z0-9]\{32,\}" --exclude-dir=.git .; then
            echo "‚ùå Potential OpenAI API keys found"
            exit 1
          fi

          if grep -r "pk_[a-zA-Z0-9]\{24,\}" --exclude-dir=.git .; then
            echo "‚ùå Potential Stripe keys found"
            exit 1
          fi

          echo "‚úÖ No obvious secrets detected"

      - name: Privacy compliance check
        run: |
          echo "üîí Checking privacy compliance..."

          # Check for telemetry/analytics
          if grep -r "analytics\|telemetry\|tracking" --exclude-dir=.git --exclude="*.yml" --exclude="*.md" .; then
            echo "‚ö†Ô∏è Potential privacy concern found - review needed"
          fi

          # Check for hardcoded credentials
          if grep -r "password\s*=\s*[\"'][^\"']*[\"']" --include="*.py" .; then
            echo "‚ùå Hardcoded passwords detected"
            exit 1
          fi

          echo "‚úÖ Privacy compliance check passed"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Python syntax check
        run: |
          echo "üêç Checking Python syntax..."
          python -m py_compile scripts/model-manager.py
          python -m py_compile api/secure-proxy.py
          python -m py_compile api/auth-middleware.py
          echo "‚úÖ Python syntax check passed"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.privacy-focused
          push: false
          tags: test-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "üß™ Testing Docker image..."

          # Basic container test
          docker run --rm test-image:latest python3 --version
          echo "‚úÖ Docker image test passed"

      - name: Validate templates
        run: |
          echo "üöÄ Validating deployment templates..."

          # Validate JSON templates
          python3 -c "
          import json

          # Test RunPod template
          with open('templates/runpod-template.json') as f:
              runpod = json.load(f)
              assert 'name' in runpod
              assert 'image' in runpod
              print('‚úÖ RunPod template valid')

          # Test Vast.ai template
          with open('templates/vast-ai-template.json') as f:
              vast = json.load(f)
              assert 'template_name' in vast
              assert 'image' in vast
              print('‚úÖ Vast.ai template valid')
          "

  deploy:
    name: Deploy to Container Registry
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.privacy-focused
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create deployment artifacts
        run: |
          echo "üì¶ Creating deployment artifacts..."

          mkdir -p artifacts
          cp templates/*.json artifacts/
          cp scripts/deploy-runpod.sh artifacts/
          cp .env.example artifacts/

          echo "üéâ Deployment successful!"
          echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-artifacts
          path: artifacts/

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'

      - name: Check dependencies
        run: |
          echo "üîç Checking Python dependencies..."
          pip install safety
          safety check || echo "‚ö†Ô∏è Some vulnerabilities found - review recommended"

  notification:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, security-scan]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Report status
        run: |
          echo "üìä Deployment Summary"
          echo "===================="
          echo "Deploy: ${{ needs.deploy.result }}"
          echo "Security: ${{ needs.security-scan.result }}"

          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Private LLM Cloud deployed successfully!"
            echo "üê≥ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            echo "üöÄ Ready for production use!"
          else
            echo "‚ùå Deployment failed - check logs"
          fi